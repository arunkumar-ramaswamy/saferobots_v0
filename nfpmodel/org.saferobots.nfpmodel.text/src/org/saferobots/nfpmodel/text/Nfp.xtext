// automatically generated by Xtext
grammar org.saferobots.nfpmodel.text.Nfp with org.eclipse.xtext.common.Terminals

import "http://ssmlbase/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://nfp/1.0" as nfp
import "http://nfp/1.0" as nfp0

Connector returns Connector:
	'Connector'
	name=EString
	'{'
		'in_port' in_port=[Port|EString]
		'out_port' out_port=[Port|EString]
		('has_QoS' has_QoS=QoS)?
		('has_NFP' has_NFP=NFP)?
	'}';







NFP_Attribute returns nfp::NFP_Attribute:
	NFP_Attribute_Impl | Quantitative_Impl | Qualitative | Estimated | Measured;

Quantitative returns nfp::Quantitative:
	Quantitative_Impl | Estimated | Measured;




EString returns ecore::EString:
	STRING | ID;

QoS returns QoS:
	{QoS}
	'QoS'
	name=EString
	'{'
		('for_context' for_context=[nfp::Context|EString])?
		('elements' '{' elements+=NFP ( "," elements+=NFP)* '}' )?
		('has_policy' has_policy=QoS_Policy)?
	'}';

Port returns Port:
	{Port}
	'Port'
	'{'
		('type' type=port_type)?
		('contain_ports' '{' contain_ports+=Port ( "," contain_ports+=Port)* '}' )?
	'}';

NFP returns NFP:
	{NFP}
	'NFP'
	name=EString
	'{'
		('has_policy' has_policy=NFP_Policy)?
		('attributes' '{' attributes+=NFP_Attribute ( "," attributes+=NFP_Attribute)* '}' )?
	'}';

QoS_Policy returns nfp::QoS_Policy:
	{nfp::QoS_Policy}
	'QoS_Policy'
	name=EString;

Context returns nfp::Context:
	{nfp::Context}
	'Context'
	name=EString;

port_type returns port_type:
	'port_type' /* TODO: implement this rule and an appropriate IValueConverter */;

NFP_Policy returns nfp::NFP_Policy:
	{nfp::NFP_Policy}
	'NFP_Policy'
	name=EString;

NFP_Attribute_Impl returns nfp::NFP_Attribute:
	{nfp::NFP_Attribute}
	'NFP_Attribute'
	name=EString
	'{'
		('is_qualitative' is_qualitative=[nfp::Quantitative|EString])?
		('is_quantitative' is_quantitative=[nfp::Qualitative|EString])?
	'}';

Quantitative_Impl returns nfp::Quantitative:
	{nfp::Quantitative}
	'Quantitative'
	name=EString
	'{'
		('type' type=Attribute_type)?
		('is_qualitative' is_qualitative=[nfp::Quantitative|EString])?
		('is_quantitative' is_quantitative=[nfp::Qualitative|EString])?
		('has_unit' has_unit=[nfp::Unit|EString])?
		('has_contraint' has_contraint=[nfp::Constraint|EString])?
	'}';

Qualitative returns nfp::Qualitative:
	{nfp::Qualitative}
	'Qualitative'
	name=EString
	'{'
		('is_qualitative' is_qualitative=[nfp::Quantitative|EString])?
		('is_quantitative' is_quantitative=[nfp::Qualitative|EString])?
	'}';

Estimated returns nfp::Estimated:
	{nfp::Estimated}
	'Estimated'
	name=EString
	'{'
		('type' type=Attribute_type)?
		('is_qualitative' is_qualitative=[nfp::Quantitative|EString])?
		('is_quantitative' is_quantitative=[nfp::Qualitative|EString])?
		('has_unit' has_unit=[nfp::Unit|EString])?
		('has_contraint' has_contraint=[nfp::Constraint|EString])?
	'}';

Measured returns nfp::Measured:
	{nfp::Measured}
	'Measured'
	name=EString
	'{'
		('type' type=Attribute_type)?
		('is_qualitative' is_qualitative=[nfp::Quantitative|EString])?
		('is_quantitative' is_quantitative=[nfp::Qualitative|EString])?
		('has_unit' has_unit=[nfp::Unit|EString])?
		('has_contraint' has_contraint=[nfp::Constraint|EString])?
	'}';

Attribute_type returns nfp::Attribute_type:
	'Attribute_type' /* TODO: implement this rule and an appropriate IValueConverter */;

Unit returns nfp::Unit:
	{nfp::Unit}
	'Unit'
	name=EString;

Constraint returns nfp::Constraint:
	{nfp::Constraint}
	'Constraint'
	name=EString;
